# Generated by Django 3.1.2 on 2020-11-24 16:47

import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import timezone_field.fields

import goosetools.users.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Corp",
            fields=[
                ("name", models.TextField(primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name="DiscordUser",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("username", models.TextField(unique=True)),
                ("uid", models.TextField(blank=True, null=True, unique=True)),
                ("avatar_hash", models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Character",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("ingame_name", models.TextField(unique=True)),
                (
                    "corp",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="users.corp"
                    ),
                ),
                (
                    "discord_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="users.discorduser",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="GooseUser",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        max_length=150,
                        unique=True,
                        validators=[
                            goosetools.users.models.UnicodeAndSpacesUsernameValidator()
                        ],
                    ),
                ),
                (
                    "timezone",
                    timezone_field.fields.TimeZoneField(default="Europe/London"),
                ),
                (
                    "broker_fee",
                    models.DecimalField(
                        decimal_places=2,
                        default=8.0,
                        max_digits=5,
                        verbose_name="Your Broker Fee in %",
                    ),
                ),
                (
                    "transaction_tax",
                    models.DecimalField(
                        decimal_places=2,
                        default=15.0,
                        max_digits=5,
                        verbose_name="Your Transaction Tax in %",
                    ),
                ),
                (
                    "default_character",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="users.character",
                    ),
                ),
                (
                    "discord_user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="users.discorduser",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
