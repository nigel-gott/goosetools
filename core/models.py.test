import datetime

from django.conf import settings
from django.core.exceptions import ValidationError
from django.db import models
from django.utils.translation import gettext_lazy as _
from djmoney.models.fields import MoneyField
from django_fsm import FSMField, transition


class Region(models.Model):
    name = models.TextField(primary_key=True)


class System(models.Model):
    name = models.TextField(primary_key=True)
    region = models.ForeignKey(Region, on_delete=models.CASCADE)


class Corp(models.Model):
    name = models.TextField(primary_key=True)


class Character(models.Model):
    user = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
    )
    ingame_name = models.TextField()
    corp = models.ForeignKey(Corp, on_delete=models.CASCADE)


class FleetType(models.Model):
    type = models.TextField()


class Fleet(models.Model):
    fc = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
    )
    name = models.TextField()
    fleet_type = models.ForeignKey(FleetType, on_delete=models.CASCADE)
    start = models.DateTimeField()
    end = models.DateTimeField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    duration = models.TextField(blank=True, null=True)
    form_up = models.ForeignKey(System, on_delete=models.CASCADE, null=True, blank=True)
    destination_region = models.ForeignKey(Region, on_delete=models.CASCADE, null=True, blank=True)
    destination_system = models.ForeignKey(System, on_delete=models.CASCADE, null=True, blank=True)
    current_system = models.ForeignKey(System, on_delete=models.CASCADE, null=True, blank=True)
    current_region = models.ForeignKey(Region, on_delete=models.CASCADE, null=True, blank=True)
    allowed_ships = models.TextField()


class FleetMember(models.Model):
    fleet = models.ForeignKey(Fleet, on_delete=models.CASCADE)
    character = models.ForeignKey(Character, on_delete=models.CASCADE)
    joined_at = models.DateTimeField(blank=True, null=True)
    left_at = models.DateTimeField(blank=True, null=True)


class ItemType(models.Model):
    type = models.TextField()


class ItemSubType(models.Model):
    item_type = models.ForeignKey(ItemType, on_delete=models.CASCADE)
    item_sub_type = models.TextField()


class ItemSubSubType(models.Model):
    item_sub_type = models.ForeignKey(ItemSubType, on_delete=models.CASCADE)
    item_sub_sub_type = models.TextField()


class Item(models.Model):
    item_type = models.ForeignKey(ItemSubSubType, on_delete=models.CASCADE)
    name = models.TextField(primary_key=True)
    tech_level = models.PositiveIntegerField()
    tags = models.TextField(blank=True, null=True)


class Station(models.Model):
    system = models.ForeignKey(System, on_delete=models.CASCADE)
    name = models.TextField(primary_key=True)


class CorpHanger(models.Model):
    corp = models.ForeignKey(Corp, on_delete=models.CASCADE)
    station = models.ForeignKey(Station, on_delete=models.CASCADE)
    hanger = models.CharField(choices=[
        ('1', 'Hanger 1'),
        ('2', 'Hanger 2'),
        ('3', 'Hanger 3'),
        ('4', 'Hanger 4'),
    ])


class CharacterLocation(models.Model):
    character = models.ForeignKey(Character, on_delete=models.CASCADE)
    station = models.ForeignKey(Station, on_delete=models.CASCADE, blank=True, null=True)


class ItemLocation(models.Model):
    character_location = models.ForeignKey(CharacterLocation, on_delete=models.CASCADE, blank=True, null=True)
    corp_hanger = models.ForeignKey(CorpHanger, on_delete=models.CASCADE, blank=True, null=True)

    def clean(self):
        if self.character_location and self.corp_hanger:
            raise ValidationError(_('An item cannot be located both on a character and in a corp hanger.'))
        if not self.character_location and not self.corp_hanger:
            raise ValidationError(_('An item must be either on a character or in a corp hanger.'))


class AnomType(models.Model):
    level = models.PositiveIntegerField()
    type = models.TextField(choices=[
        ('Deadspace', 'Deadspace'),
        ('Scout', 'Scout'),
        ('Inquisitor', 'Inquisitor'),
        ('Condensed Belt', 'Condensed Belt'),
    ])


class FleetAnom(models.Model):
    fleet = models.ForeignKey(Fleet, on_delete=models.CASCADE)
    anom_type = models.ForeignKey(AnomType, on_delete=models.CASCADE)
    time = models.DateTimeField()
    system = models.ForeignKey(System, on_delete=models.CASCADE)
    looter = models.ForeignKey(
        Character,
        on_delete=models.CASCADE,
    )


class KillMail(models.Model):
    fleet = models.ForeignKey(Fleet, on_delete=models.CASCADE)
    killed_ship = models.TextField()
    description = models.TextField()
    looter = models.ForeignKey(
        Character,
        on_delete=models.CASCADE,
        blank=True,
        null=True
    )


class ItemShareGroup(models.Model):
    fleet_anom = models.ForeignKey(FleetAnom, on_delete=models.CASCADE, null=True, blank=True)
    kill_mail = models.ForeignKey(KillMail, on_delete=models.CASCADE, null=True, blank=True)

    def clean(self):
        if self.kill_mail and self.fleet_anom:
            raise ValidationError(_('A share group cannot be both from a killmail and from an anom.'))
        if not self.kill_mail and not self.fleet_anom:
            raise ValidationError(_('A share group must be tied to atleast single killmail or an anom.'))


class InventoryItem(models.Model):
    location = models.ForeignKey(ItemLocation, on_delete=models.CASCADE)
    item = models.ForeignKey(Item, on_delete=models.CASCADE)
    quantity = models.PositiveBigIntegerField()
    listed_at_price = MoneyField(max_digits=14, decimal_places=2, default_currency='EEI')
    net_sold_at_price = MoneyField(max_digits=14, decimal_places=2, default_currency='EEI')
    state = FSMField(default='transit', protected=True)

    @transition(field=state, source='transit', target='waiting')
    def entered_station(self):
        pass

    @transition(field=state, source='waiting', target='waiting')
    def entered_station(self):
        pass


class BecomeSellerFoStackSellerRequest(models.Model):
    looted_item = models.ForeignKey(InventoryItem, on_delete=models.CASCADE)
    quantity = models.PositiveBigIntegerField()
    seller = models.ForeignKey(
        Character,
        on_delete=models.CASCADE
    )


class DirectBuyRequest(models.Model):
    looted_item = models.ForeignKey(InventoryItem, on_delete=models.CASCADE)
    price = models.FloatField()
    quantity = models.PositiveBigIntegerField()
    buyer = models.ForeignKey(
        Character,
        on_delete=models.CASCADE
    )


class ItemShare(models.Model):
    share_holder = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
    )
    share = models.IntegerField()
    item_share_group = models.ForeignKey(ItemShareGroup, on_delete=models.CASCADE)
